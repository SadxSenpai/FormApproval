@page "/new/{TemplateId:guid}"
@rendermode InteractiveServer
@* 
    Page to create a new request for the selected template.
*@
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me
@inject NavigationManager Nav
@inject ILogger<New> Logger

<h3>New Request</h3>

<EditForm Model="@vm"
          OnValidSubmit="HandleSubmit"
          OnInvalidSubmit="HandleInvalidSubmit"
          FormName="NewLeaveRequestForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label class="form-label">Full Name</label>
        <InputText class="form-control" @bind-Value="vm.FullName" readonly />
    </div>

    <div class="mb-2">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="vm.Email" readonly />
    </div>

    <div class="mb-2">
        <label class="form-label">Department</label>
        <InputText class="form-control" @bind-Value="vm.Department" readonly />
    </div>

    <div class="row">
        <div class="col">
            <label class="form-label">From</label>
            <InputDate class="form-control" @bind-Value="vm.From" />
            <ValidationMessage For="() => vm.From" />
        </div>
        <div class="col">
            <label class="form-label">To</label>
            <InputDate class="form-control" @bind-Value="vm.To" />
            <ValidationMessage For="() => vm.To" />
        </div>
    </div>

    <div class="mt-2">
        <label class="form-label">Reason</label>
        <InputTextArea class="form-control" @bind-Value="vm.Reason" />
        <ValidationMessage For="() => vm.Reason" />
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" type="button" @onclick="SaveDraft">Save Draft</button>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>

    @if (!string.IsNullOrEmpty(dateError))
    {
        <div class="validation-message">@dateError</div>
    }
</EditForm>

@code {
    [Parameter] public Guid TemplateId { get; set; }

    private NewVm vm = new();
    private string? dateError;

    protected override void OnInitialized()
    {
        vm.FullName = Me.Name;
        vm.Email = Me.Email;
        vm.Department = Me.Department;
    }

    private void SaveDraft()
    {
        var inst = ToInstance();
        Repo.CreateDraft(inst);
        Nav.NavigateTo($"/form/{inst.Id}");
    }

    private void HandleSubmit()
    {
        dateError = null;
        Logger.LogInformation("HandleSubmit Template={TemplateId}. From={From}, To={To}, Reason='{Reason}'", TemplateId, vm.From, vm.To, vm.Reason);

        if (vm.From.HasValue && vm.To.HasValue && vm.To.Value < vm.From.Value)
        {
            dateError = "'To' date cannot be before 'From' date.";
            Logger.LogWarning("Validation: To < From (From={From}, To={To})", vm.From, vm.To);
            return;
        }

        var inst = ToInstance();
        inst.Status = FormApproval.Domain.FormStatus.Submitted;
        inst.SubmittedAt = DateTime.UtcNow;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Submit" });

        Repo.CreateDraft(inst);
        Nav.NavigateTo("/submitted");
    }

    private void HandleInvalidSubmit(EditContext editContext)
    {
        var messages = string.Join(" | ", editContext.GetValidationMessages());
        Logger.LogWarning("OnInvalidSubmit (Template={TemplateId}). Errors: {Errors}",
            TemplateId, string.IsNullOrWhiteSpace(messages) ? "(none)" : messages);
    }

    private FormApproval.Domain.FormInstance ToInstance()
    {
        var inst = new FormApproval.Domain.FormInstance
        {
            TemplateId = TemplateId,
            OwnerUserId = Me.UserId,
            OwnerName = Me.Name,
            OwnerEmail = Me.Email,
            Department = Me.Department,
            Answers = new()
            {
                ["FullName"] = vm.FullName,
                ["Email"] = vm.Email,
                ["Department"] = vm.Department,
                ["FromDate"] = vm.From?.ToString("yyyy-MM-dd"),
                ["ToDate"] = vm.To?.ToString("yyyy-MM-dd"),
                ["Reason"] = vm.Reason
            }
        };
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Create" });
        return inst;
    }

    public class NewVm
    {
        public string? FullName { get; set; }
        public string? Email { get; set; }
        public string? Department { get; set; }

        [Required(ErrorMessage = "From date is required")]
        public DateTime? From { get; set; }

        [Required(ErrorMessage = "To date is required")]
        public DateTime? To { get; set; }

        [Required(ErrorMessage = "Please provide a reason")]
        public string? Reason { get; set; }
    }
}