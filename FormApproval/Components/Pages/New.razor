@page "/new"
@rendermode InteractiveServer
@* 
    Page to create a new leave request.
    - InteractiveServer: enables client-side interactivity for form validation/submit.
    - EditForm + DataAnnotationsValidator: Blazor form with validation based on attributes.
    - FormName: required in .NET 8+ for anti-forgery protection on postbacks.
    - OnValidSubmit/OnInvalidSubmit: handlers for success/error flows.
*@
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me
@inject NavigationManager Nav
@inject ILogger<New> Logger

<h3>New Leave Request</h3>

<EditForm Model="@vm"
          OnValidSubmit="HandleSubmit"
          OnInvalidSubmit="HandleInvalidSubmit"
          FormName="NewLeaveRequestForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @* Prefilled identity fields are readonly so they submit but aren’t editable *@
    <div class="mb-2">
        <label class="form-label">Full Name</label>
        <InputText class="form-control" @bind-Value="vm.FullName" readonly />
    </div>

    <div class="mb-2">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="vm.Email" readonly />
    </div>

    <div class="mb-2">
        <label class="form-label">Department</label>
        <InputText class="form-control" @bind-Value="vm.Department" readonly />
    </div>

    @* Required date inputs with per-field validation messages *@
    <div class="row">
        <div class="col">
            <label class="form-label">From</label>
            <InputDate class="form-control" @bind-Value="vm.From" />
            <ValidationMessage For="() => vm.From" />
        </div>
        <div class="col">
            <label class="form-label">To</label>
            <InputDate class="form-control" @bind-Value="vm.To" />
            <ValidationMessage For="() => vm.To" />
        </div>
    </div>

    @* Required free-text reason *@
    <div class="mt-2">
        <label class="form-label">Reason</label>
        <InputTextArea class="form-control" @bind-Value="vm.Reason" />
        <ValidationMessage For="() => vm.Reason" />
    </div>

    @* Save Draft keeps status Draft; Submit sets status Submitted and logs audit *@
    <div class="mt-3">
        <button class="btn btn-secondary" type="button" @onclick="SaveDraft">Save Draft</button>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>

    @* Extra cross-field validation message for To < From case *@
    @if (!string.IsNullOrEmpty(dateError))
    {
        <div class="validation-message">@dateError</div>
    }

    @* Dev-only: shows the bound values for quick debugging *@
    <div>
        <b>From:</b> @vm.From<br />
        <b>To:</b> @vm.To<br />
        <b>Reason:</b> @vm.Reason
    </div>
</EditForm>

@code {
    // View-model bound to the form. DataAnnotations drive validation.
    private NewVm vm = new();
    private string? dateError;

    // Prefill identity info from the current user service.
    protected override void OnInitialized()
    {
        vm.FullName = Me.Name;
        vm.Email = Me.Email;
        vm.Department = Me.Department;
    }

    // Save as Draft (keeps default status), then navigate to detail view.
    private void SaveDraft()
    {
        var inst = ToInstance();
        Repo.CreateDraft(inst);
        Nav.NavigateTo($"/form/{inst.Id}");
    }

    // Called only when the model is valid per DataAnnotationsValidator.
    private void HandleSubmit()
    {
        dateError = null;
        Logger.LogInformation("HandleSubmit called. From={From}, To={To}, Reason='{Reason}'", vm.From, vm.To, vm.Reason);

        // Cross-field validation: To must be >= From.
        if (vm.From.HasValue && vm.To.HasValue && vm.To.Value < vm.From.Value)
        {
            dateError = "'To' date cannot be before 'From' date.";
            Logger.LogWarning("Validation: To < From (From={From}, To={To})", vm.From, vm.To);
            return;
        }

        // Create the instance, set status and timestamps, and add audit.
        var inst = ToInstance();
        inst.Status = FormApproval.Domain.FormStatus.Submitted;
        inst.SubmittedAt = DateTime.UtcNow;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Submit" });

        Logger.LogInformation("Submitting instance {Id} for {Owner} ({Email})", inst.Id, inst.OwnerName, inst.OwnerEmail);
        Repo.CreateDraft(inst); // in-memory add; Save is a no-op

        // Navigate to success page.
        Nav.NavigateTo("/submitted");
    }

    // Logs invalid submissions to help diagnose validation issues.
    private void HandleInvalidSubmit(EditContext editContext)
    {
        var messages = string.Join(" | ", editContext.GetValidationMessages());
        Logger.LogWarning("OnInvalidSubmit. From={From}, To={To}, Reason='{Reason}'. Errors: {Errors}",
            vm.From, vm.To, vm.Reason, string.IsNullOrWhiteSpace(messages) ? "(none)" : messages);
    }

    // Maps the VM into a domain instance, including an answer dictionary for display.
    private FormApproval.Domain.FormInstance ToInstance()
    {
        var inst = new FormApproval.Domain.FormInstance
        {
            TemplateId = Repo.GetDefaultTemplate().Id,
            OwnerUserId = Me.UserId,
            OwnerName = Me.Name,
            OwnerEmail = Me.Email,
            Department = Me.Department,
            Answers = new()
            {
                ["FullName"] = vm.FullName,
                ["Email"] = vm.Email,
                ["Department"] = vm.Department,
                ["FromDate"] = vm.From?.ToString("yyyy-MM-dd"),
                ["ToDate"] = vm.To?.ToString("yyyy-MM-dd"),
                ["Reason"] = vm.Reason
            }
        };
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Create" });
        return inst;
    }

    // Form view-model with validation rules.
    public class NewVm
    {
        public string? FullName { get; set; }
        public string? Email { get; set; }
        public string? Department { get; set; }

        [Required(ErrorMessage = "From date is required")]
        public DateTime? From { get; set; }

        [Required(ErrorMessage = "To date is required")]
        public DateTime? To { get; set; }

        [Required(ErrorMessage = "Please provide a reason")]
        public string? Reason { get; set; }
    }
}