@page "/new/{TemplateId:guid}"
@rendermode InteractiveServer
@* 
    Page to create a new request for the selected template.
    Supports PTO (date range) and Overtime/Early leave (date + start/end time + total hours).
*@
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me
@inject NavigationManager Nav
@inject ILogger<New> Logger

<h3>@(templateName ?? "New Request")</h3>

<EditForm Model="@vm"
          OnValidSubmit="HandleSubmit"
          OnInvalidSubmit="HandleInvalidSubmit"
          FormName="NewLeaveRequestForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label class="form-label">Full Name</label>
        <InputText class="form-control" @bind-Value="vm.FullName" readonly />
    </div>

    <div class="mb-2">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="vm.Email" readonly />
    </div>

    <div class="mb-2">
        <label class="form-label">Department</label>
        <InputText class="form-control" @bind-Value="vm.Department" readonly />
    </div>

    @if (!isOvertime)
    {
        <div class="row">
            <div class="col">
                <label class="form-label">From</label>
                <InputDate class="form-control" @bind-Value="vm.From" />
                <ValidationMessage For="@(() => vm.From)" />
            </div>
            <div class="col">
                <label class="form-label">To</label>
                <InputDate class="form-control" @bind-Value="vm.To" />
                <ValidationMessage For="@(() => vm.To)" />
            </div>
        </div>
    }
    else
    {
        @* Overtime timeline between 07:30 and 16:00 with 30-min slots *@
        <div class="row">
            <div class="col-12 col-md-4">
                <label class="form-label">Date</label>
                <InputDate class="form-control" @bind-Value="vm.Day" />
            </div>
            <div class="col-6 col-md-4">
                <label class="form-label">Start time</label>
                <select class="form-select" @onchange="OnStartChanged" value="@startValue">
                    <option value="">-- Select --</option>
                    @foreach (var s in Slots)
                    {
                        var val = s.ToString("HH:mm");
                        <option value="@val" selected="@(val == startValue)">@val</option>
                    }
                </select>
            </div>
            <div class="col-6 col-md-4">
                <label class="form-label">End time</label>
                <select class="form-select" @onchange="OnEndChanged" value="@endValue">
                    <option value="">-- Select --</option>
                    @foreach (var s in Slots)
                    {
                        var val = s.ToString("HH:mm");
                        <option value="@val" selected="@(val == endValue)">@val</option>
                    }
                </select>
            </div>
        </div>

        @* Visual timeline bar *@
        <div class="mt-2">
            <div class="d-flex justify-content-between small text-muted">
                <span>@WorkStart.ToString("HH:mm")</span>
                <span>@WorkEnd.ToString("HH:mm")</span>
            </div>
            <div style="position:relative;height:12px;background:#e9ecef;border-radius:6px;">
                <div style="position:absolute;left:@LeftPercent%;width:@WidthPercent%;height:100%;background:#0d6efd;border-radius:6px;"></div>
            </div>
        </div>

        @if (TotalMinutes is int m && m > 0)
        {
            <div class="alert alert-info mt-2 py-2">
                <b>Total:</b> @($"{m} min") (@(Math.Round(m / 60.0, 2)) h)
            </div>
        }
    }

    <div class="mt-2">
        <label class="form-label">Reason</label>
        <InputTextArea class="form-control" @bind-Value="vm.Reason" />
        <ValidationMessage For="@(() => vm.Reason)" />
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" type="button" @onclick="SaveDraft">Save Draft</button>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>

    @if (!string.IsNullOrEmpty(dateError))
    {
        <div class="validation-message mt-2">@dateError</div>
    }
</EditForm>

@code {
    [Parameter] public Guid TemplateId { get; set; }

    private string? templateName;
    private bool isOvertime;

    private NewVm vm = new();
    private string? dateError;

    // Workday window and 30-min slots
    private static readonly TimeOnly WorkStart = new(7, 30);
    private static readonly TimeOnly WorkEnd = new(16, 0);
    private readonly List<TimeOnly> Slots = new();

    // Bound select values (strings like "07:30")
    private string? startValue;
    private string? endValue;

    protected override void OnParametersSet()
    {
        templateName = Repo.GetTemplate(TemplateId)?.Name ?? "New Request";
        isOvertime = templateName.Contains("overtime", StringComparison.OrdinalIgnoreCase);

        vm.FullName = Me.Name;
        vm.Email = Me.Email;
        vm.Department = Me.Department;

        // Build 30-min slots for the workday
        Slots.Clear();
        for (var t = WorkStart; t <= WorkEnd; t = t.AddMinutes(30))
            Slots.Add(t);

        // Keep select values in sync with VM if already set
        startValue = vm.StartTime?.ToString("HH:mm");
        endValue = vm.EndTime?.ToString("HH:mm");
    }

    private void OnStartChanged(ChangeEventArgs e)
    {
        startValue = e.Value?.ToString();
        vm.StartTime = ParseSlot(startValue);
        // If end before start, clear end
        if (vm.EndTime.HasValue && vm.StartTime.HasValue && Compare(vm.EndTime.Value, vm.StartTime.Value) <= 0)
        {
            vm.EndTime = null;
            endValue = null;
        }
        StateHasChanged();
    }

    private void OnEndChanged(ChangeEventArgs e)
    {
        endValue = e.Value?.ToString();
        vm.EndTime = ParseSlot(endValue);
        // If end before start, show message (validated on submit too)
        StateHasChanged();
    }

    private static TimeOnly? ParseSlot(string? v)
        => TimeOnly.TryParse(v, out var t) ? t : null;

    private static int Compare(TimeOnly a, TimeOnly b)
        => TimeSpan.Compare(a.ToTimeSpan(), b.ToTimeSpan());

    private static double MinutesBetween(TimeOnly a, TimeOnly b)
        => (a.ToTimeSpan() - b.ToTimeSpan()).TotalMinutes;

    private double LeftPercent
    {
        get
        {
            if (vm.StartTime is not TimeOnly s) return 0;
            var total = MinutesBetween(WorkEnd, WorkStart);
            var left = Math.Clamp(MinutesBetween(s, WorkStart), 0, total);
            return Math.Round(left / total * 100.0, 2);
        }
    }

    private double WidthPercent
    {
        get
        {
            if (vm.StartTime is not TimeOnly s || vm.EndTime is not TimeOnly e) return 0;
            var total = MinutesBetween(WorkEnd, WorkStart);
            var width = Math.Clamp(MinutesBetween(e, s), 0, total);
            return Math.Round(width / total * 100.0, 2);
        }
    }

    private int? TotalMinutes
    {
        get
        {
            if (vm.StartTime is not TimeOnly s || vm.EndTime is not TimeOnly e) return null;
            var mins = (int)MinutesBetween(e, s);
            return mins > 0 ? mins : null;
        }
    }

    private void SaveDraft()
    {
        var inst = ToInstance();
        Repo.CreateDraft(inst);
        Nav.NavigateTo($"/form/{inst.Id}");
    }

    private void HandleSubmit()
    {
        dateError = null;
        if (!ValidateInputs(out var err))
        {
            dateError = err;
            return;
        }

        var inst = ToInstance();
        inst.Status = FormApproval.Domain.FormStatus.Submitted;
        inst.SubmittedAt = DateTime.UtcNow;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Submit" });

        Repo.CreateDraft(inst);
        Nav.NavigateTo("/submitted");
    }

    private bool ValidateInputs(out string error)
    {
        error = string.Empty;

        if (!isOvertime)
        {
            if (!vm.From.HasValue) { error = "From date is required."; return false; }
            if (!vm.To.HasValue) { error = "To date is required."; return false; }
            if (vm.To.Value < vm.From.Value) { error = "'To' date cannot be before 'From' date."; return false; }
            return true;
        }

        // Overtime/Early leave
        if (!vm.Day.HasValue) { error = "Date is required."; return false; }
        if (!vm.StartTime.HasValue) { error = "Start time is required."; return false; }
        if (!vm.EndTime.HasValue) { error = "End time is required."; return false; }
        if (Compare(vm.EndTime.Value, vm.StartTime.Value) <= 0) { error = "End must be after Start."; return false; }
        if (Compare(vm.StartTime.Value, WorkStart) < 0 || Compare(vm.EndTime.Value, WorkEnd) > 0)
        {
            error = $"Times must be within the workday {WorkStart:HH\\:mm}–{WorkEnd:HH\\:mm}.";
            return false;
        }
        // 30-min increments are enforced by slot options; no free-form values exist
        if (TotalMinutes is not int m || m <= 0) { error = "Total must be greater than 0 minutes."; return false; }
        return true;
    }

    private void HandleInvalidSubmit(EditContext editContext)
    {
        var messages = string.Join(" | ", editContext.GetValidationMessages());
        Logger.LogWarning("OnInvalidSubmit (Template={TemplateId}). Errors: {Errors}",
            TemplateId, string.IsNullOrWhiteSpace(messages) ? "(none)" : messages);
    }

    private FormApproval.Domain.FormInstance ToInstance()
    {
        var answers = new Dictionary<string, string?>
        {
            ["FullName"] = vm.FullName,
            ["Email"] = vm.Email,
            ["Department"] = vm.Department,
            ["Reason"] = vm.Reason
        };

        if (!isOvertime)
        {
            answers["FromDate"] = vm.From?.ToString("yyyy-MM-dd");
            answers["ToDate"] = vm.To?.ToString("yyyy-MM-dd");
        }
        else
        {
            answers["Date"] = vm.Day?.ToString("yyyy-MM-dd");
            answers["StartTime"] = vm.StartTime?.ToString("HH:mm");
            answers["EndTime"] = vm.EndTime?.ToString("HH:mm");
            answers["TotalHours"] = TotalMinutes is int m ? Math.Round(m / 60.0, 2).ToString("0.##") : null;
            answers["TotalMinutes"] = TotalMinutes?.ToString();
        }

        var inst = new FormApproval.Domain.FormInstance
        {
            TemplateId = TemplateId,
            OwnerUserId = Me.UserId,
            OwnerName = Me.Name,
            OwnerEmail = Me.Email,
            Department = Me.Department,
            Answers = answers
        };
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Create" });
        return inst;
    }

    public class NewVm
    {
        public string? FullName { get; set; }
        public string? Email { get; set; }
        public string? Department { get; set; }

        // PTO fields (validated manually when in PTO mode)
        public DateTime? From { get; set; }
        public DateTime? To { get; set; }

        // Overtime fields
        public DateTime? Day { get; set; }
        public TimeOnly? StartTime { get; set; }
        public TimeOnly? EndTime { get; set; }

        // Always required
        [Required(ErrorMessage = "Please provide a reason")]
        public string? Reason { get; set; }
    }
}