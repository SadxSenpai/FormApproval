@page "/dashboard"
@* 
    Dashboard:
    - "My Submissions": all requests owned by the current user (any status).
    - "My Approvals": visible only if Me.IsApprover and lists Submitted items.
      Includes inline Approve/Reject buttons that update status and audit.
*@
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me

<h3>Dashboard</h3>

<h4>My Submissions</h4>
<table class="table table-sm">
    <thead><tr><th>Status</th><th>Created</th><th></th></tr></thead>
    <tbody>
    @foreach (var f in Repo.GetMine(Me.UserId))
    {
        <tr>
            <td>@f.Status</td>
            <td>@f.CreatedAt.ToLocalTime()</td>
            <td><a class="btn btn-link" href="/form/@f.Id">Open</a></td>
        </tr>
    }
    </tbody>
</table>

@if (Me.IsApprover)
{
    <h4>My Approvals</h4>
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Submitter</th>
                <th>Dates</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var f in Repo.GetApproverQueue(Me.IsApprover))
        {
            <tr>
                <td>@f.OwnerName</td>
                <td>@(f.Answers.GetValueOrDefault("FromDate")) – @(f.Answers.GetValueOrDefault("ToDate"))</td>
                <td>
                    @* Review opens the detail page with comment and timeline *@
                    <a class="btn btn-link me-2" href="/form/@f.Id">Review</a>
                    @* Inline decisions mutate the in-memory instance and refresh the table *@
                    <button class="btn btn-success btn-sm me-2" @onclick="() => Approve(f.Id)">Approve</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => Reject(f.Id)">Reject</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    // Approve only if the item is still Submitted.
    private void Approve(Guid id)
    {
        if (!Me.IsApprover) return;
        var item = Repo.Get(id);
        if (item is null || item.Status != FormApproval.Domain.FormStatus.Submitted) return;

        item.Status = FormApproval.Domain.FormStatus.Approved;
        item.Audit.Add(new() { Actor = Me.Name, Action = "Approve" });
        Repo.Save(item); // no-op in-memory but kept for parity

        StateHasChanged(); // refresh UI so the item drops out of queue
    }

    // Reject only if the item is still Submitted.
    private void Reject(Guid id)
    {
        if (!Me.IsApprover) return;
        var item = Repo.Get(id);
        if (item is null || item.Status != FormApproval.Domain.FormStatus.Submitted) return;

        item.Status = FormApproval.Domain.FormStatus.Rejected;
        item.Audit.Add(new() { Actor = Me.Name, Action = "Reject" });
        Repo.Save(item);

        StateHasChanged();
    }
}