@page "/dashboard"
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me

<h3>Dashboard</h3>

<h4>My Submissions</h4>
<table class="table table-sm">
    <thead><tr><th>Status</th><th>Created</th><th></th></tr></thead>
    <tbody>
    @foreach (var f in Repo.GetMine(Me.UserId))
    {
        <tr>
            <td>@f.Status</td>
            <td>@f.CreatedAt.ToLocalTime()</td>
            <td><a class="btn btn-link" href="/form/@f.Id">Open</a></td>
        </tr>
    }
    </tbody>
</table>

@if (Me.IsApprover)
{
    <h4>My Approvals</h4>
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Submitter</th>
                <th>Dates</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var f in Repo.GetApproverQueue(Me.IsApprover))
        {
            var fromDate = f.Answers.GetValueOrDefault("FromDate");
            var toDate = f.Answers.GetValueOrDefault("ToDate");
            var day = f.Answers.GetValueOrDefault("Date");
            var total = f.Answers.GetValueOrDefault("TotalHours");

            <tr>
                <td>@f.OwnerName</td>
                <td>
                    @if (!string.IsNullOrEmpty(fromDate) || !string.IsNullOrEmpty(toDate))
                    {
                        @($"{fromDate} – {toDate}")
                    }
                    else
                    {
                        @($"{day}{(string.IsNullOrEmpty(total) ? "" : $" · {total}h")}")
                    }
                </td>
                <td>
                    <a class="btn btn-link me-2" href="/form/@f.Id">Review</a>
                    <button class="btn btn-success btn-sm me-2" @onclick="() => Approve(f.Id)">Approve</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => Reject(f.Id)">Reject</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private void Approve(Guid id)
    {
        if (!Me.IsApprover) return;
        var item = Repo.Get(id);
        if (item is null || item.Status != FormApproval.Domain.FormStatus.Submitted) return;

        item.Status = FormApproval.Domain.FormStatus.Approved;
        item.Audit.Add(new() { Actor = Me.Name, Action = "Approve" });
        Repo.Save(item);

        StateHasChanged();
    }

    private void Reject(Guid id)
    {
        if (!Me.IsApprover) return;
        var item = Repo.Get(id);
        if (item is null || item.Status != FormApproval.Domain.FormStatus.Submitted) return;

        item.Status = FormApproval.Domain.FormStatus.Rejected;
        item.Audit.Add(new() { Actor = Me.Name, Action = "Reject" });
        Repo.Save(item);

        StateHasChanged();
    }
}