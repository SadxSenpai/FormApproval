@using Microsoft.AspNetCore.Components.Forms
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me
@inject NavigationManager Nav
@inject ILogger<PtoForm> Logger
@inject FormApproval.Services.IPdfService Pdfs

<EditForm Model="@vm"
          OnValidSubmit="@HandleSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit"
          FormName="NewLeaveRequestForm-PTO">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="fa-container">
        <div class="fa-card">
            <h1 class="fa-title">Antrag auf Urlaub / Arbeitsbefreiung</h1>
            <p class="fa-subtitle">Bitte ausfüllen. Felder mit * sind Pflichtfeldern.</p>

            <fieldset>
                <legend class="fa-section-title">Antragstyp *</legend>
                <div class="inline" role="radiogroup" aria-label="Antragstyp">
                    <InputRadioGroup @bind-Value="vm.Antragstyp">
                        <label class="form-check">
                            <input type="radio" name="antragstyp" value="urlaub"
                                   checked="@(vm.Antragstyp == "urlaub")"
                                   @onchange="@(() => vm.Antragstyp = "urlaub")" />
                            <span>Antrag auf Urlaub</span>
                        </label>
                        <label class="form-check">
                            <input type="radio" name="antragstyp" value="arbeitsbefreiung"
                                   checked="@(vm.Antragstyp == "arbeitsbefreiung")"
                                   @onchange="@(() => vm.Antragstyp = "arbeitsbefreiung")" />
                            <span>Antrag auf Arbeitsbefreiung / Freistellung</span>
                        </label>
                    </InputRadioGroup>
                </div>
            </fieldset>

            <fieldset>
                <legend class="fa-section-title">Person</legend>
                <div class="fa-row cols-2">
                    <div>
                        <label for="name">Name *</label>
                        <InputText id="name" class="fa-under" @bind-Value="vm.Name" />
                    </div>
                    <div>
                        <label for="vorname">Vorname *</label>
                        <InputText id="vorname" class="fa-under" @bind-Value="vm.Vorname" />
                    </div>
                </div>
                <div class="fa-row cols-2">
                    <div>
                        <label for="abteilung">Abteilung *</label>
                        <InputText id="abteilung" class="fa-under" @bind-Value="vm.Abteilung" />
                    </div>
                    <div>
                        <label for="geburtsdatum">Geburtsdatum</label>
                        <InputDate id="geburtsdatum" class="fa-under" @bind-Value="vm.Geburtsdatum" />
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend class="fa-section-title">Anspruch</legend>

                <div class="row-line">
                    <div class="muted">Urlaubsanspruch (verbleibender Anspruch lfd. Jahr)</div>
                    <div class="num-with-suffix">
                        <InputNumber id="anspruch-aktuelles-jahr" class="fa-under right" @bind-Value="vm.AnspruchAktuellesJahr" />
                        <span class="suffix">Tage</span>
                    </div>
                </div>

                <div class="row-line">
                    <div class="muted">Zusätzlicher Urlaub für Auszubildende mit Schwerbehindertenausweis (GdB 50)</div>
                    <div class="num-with-suffix">
                        <InputNumber id="anspruch-zusatz" class="fa-under right" @bind-Value="vm.AnspruchZusatz" />
                        <span class="suffix">Tage</span>
                    </div>
                </div>

                <div class="center-title">Gesamtanspruch</div>
                <div class="row-line total">
                    <div class="muted">=</div>
                    <div class="num-with-suffix">
                        <InputNumber id="anspruch-gesamt" class="fa-under right big" @bind-Value="vm.AnspruchGesamt" />
                        <span class="suffix">Tage</span>
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend class="fa-section-title">Urlaubszeiträume</legend>

                <div class="range-row">
                    <div class="muted">Tage Urlaub</div>
                    <InputNumber id="tage1" class="fa-under right" @bind-Value="vm.Tage1" />
                    <div class="muted small">vom</div>
                    <InputDate id="von1" class="fa-under" @bind-Value="vm.Von1" />
                    <div class="muted small">bis</div>
                    <InputDate id="bis1" class="fa-under" @bind-Value="vm.Bis1" />
                </div>

                <div class="range-row">
                    <div class="muted">Tage Urlaub</div>
                    <InputNumber id="tage2" class="fa-under right" @bind-Value="vm.Tage2" />
                    <div class="muted small">vom</div>
                    <InputDate id="von2" class="fa-under" @bind-Value="vm.Von2" />
                    <div class="muted small">bis</div>
                    <InputDate id="bis2" class="fa-under" @bind-Value="vm.Bis2" />
                </div>

                <div class="range-row">
                    <div class="muted">Tage Urlaub</div>
                    <InputNumber id="tage3" class="fa-under right" @bind-Value="vm.Tage3" />
                    <div class="muted small">vom</div>
                    <InputDate id="von3" class="fa-under" @bind-Value="vm.Von3" />
                    <div class="muted small">bis</div>
                    <InputDate id="bis3" class="fa-under" @bind-Value="vm.Bis3" />
                </div>
            </fieldset>

            <fieldset>
                <legend class="fa-section-title">Summen</legend>
                <div class="row-line">
                    <div class="muted">Tage gesamt</div>
                    <div class="num-with-suffix">
                        <InputNumber id="tage-gesamt" class="fa-under right" @bind-Value="vm.TageGesamt" />
                        <span class="suffix">Tage</span>
                    </div>
                </div>
                <div class="row-line">
                    <div class="muted strong">verbleibender Anspruch =</div>
                    <div class="num-with-suffix">
                        <InputNumber id="restanspruch" class="fa-under right" @bind-Value="vm.Restanspruch" />
                        <span class="suffix">Tage</span>
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend class="fa-section-title">Begründung</legend>
                <InputTextArea class="fa-textarea" @bind-Value="vm.Reason" />
            </fieldset>

            <fieldset>
                <legend class="fa-section-title">Unterschriften</legend>
                <div class="sig-grid">
                    <div>
                        <div class="sig-line"></div>
                        <div class="muted small">Datum</div>
                    </div>
                    <div>
                        <div class="sig-line"></div>
                        <div class="muted small">Unterschrift Antragsteller/in</div>
                    </div>
                </div>
                <div class="sig-grid">
                    <div>
                        <div class="sig-line"></div>
                        <div class="muted small">Datum</div>
                    </div>
                    <div>
                        <div class="sig-line"></div>
                        <div class="muted small">Unterschrift zuständige(r) Ausbilder/in</div>
                    </div>
                </div>
            </fieldset>

            <div class="actions">
                <button type="button" class="btn-reset" @onclick="BackToSelection">Zurück zur Auswahl</button>
                <button type="submit" class="btn-primary-like">Antrag absenden</button>
                <button type="reset" class="btn-reset">Eingaben löschen</button>
            </div>

            @if (!string.IsNullOrEmpty(dateError))
            {
                <div class="validation-message mt-2">@dateError</div>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public Guid TemplateId { get; set; }
    private PtoVm vm = new();
    private string? dateError;

    protected override void OnParametersSet()
    {
        vm.Abteilung ??= Me.Department;
        if (string.IsNullOrWhiteSpace(vm.Name) && string.IsNullOrWhiteSpace(vm.Vorname))
        {
            var full = Me.Name ?? string.Empty;
            var parts = full.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length >= 2) { vm.Vorname = parts[0]; vm.Name = string.Join(' ', parts.Skip(1)); }
            else { vm.Name = full; }
        }
    }

    private void HandleSubmit(EditContext context)
    {
        dateError = null;
        if (!ValidateInputs(out var err)) { dateError = err; return; }

        var inst = ToInstance();
        inst.Status = FormApproval.Domain.FormStatus.Submitted;
        inst.SubmittedAt = DateTime.UtcNow;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Submit" });

        var pdfUrl = Pdfs.SavePtoPdf(inst);
        inst.Answers["PtoPdfUrl"] = pdfUrl;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Attach", Comment = "PTO PDF attached" });

        Repo.CreateDraft(inst);
        Nav.NavigateTo("/submitted");
    }

    // Add this method to handle invalid form submissions
    private void HandleInvalidSubmit(EditContext context)
    {
        // Optionally, you can set a generic error message or log details here
        dateError = "Bitte überprüfen Sie die markierten Felder und korrigieren Sie die Eingaben.";
    }

    private static bool ValidateRange(DateTime? from, DateTime? to, out string error)
    {
        error = string.Empty;
        if (from.HasValue ^ to.HasValue) { error = "Bitte vollständigen Zeitraum (vom/bis) angeben."; return false; }
        if (from.HasValue && to.HasValue && to.Value.Date < from.Value.Date) { error = "Das 'bis'-Datum darf nicht vor dem 'vom'-Datum liegen."; return false; }
        return true;
    }

    private bool ValidateInputs(out string error)
    {
        error = string.Empty;
        if (string.IsNullOrWhiteSpace(vm.Antragstyp)) { error = "Bitte Antragstyp auswählen."; return false; }
        if (string.IsNullOrWhiteSpace(vm.Name)) { error = "Name ist erforderlich."; return false; }
        if (string.IsNullOrWhiteSpace(vm.Vorname)) { error = "Vorname ist erforderlich."; return false; }
        if (string.IsNullOrWhiteSpace(vm.Abteilung)) { error = "Abteilung ist erforderlich."; return false; }
        if (!ValidateRange(vm.Von1, vm.Bis1, out error)) return false;
        if (!ValidateRange(vm.Von2, vm.Bis2, out error)) return false;
        if (!ValidateRange(vm.Von3, vm.Bis3, out error)) return false;
        return true;
    }

    private void BackToSelection() => Nav.NavigateTo("/new");

    private FormApproval.Domain.FormInstance ToInstance()
    {
        var answers = new Dictionary<string, string?>();
        answers["Antragstyp"] = vm.Antragstyp;
        answers["Nachname"] = vm.Name;
        answers["Vorname"] = vm.Vorname;
        answers["Abteilung"] = vm.Abteilung;
        answers["Geburtsdatum"] = vm.Geburtsdatum?.ToString("yyyy-MM-dd");
        answers["AnspruchAktuellesJahr"] = vm.AnspruchAktuellesJahr?.ToString();
        answers["AnspruchZusatz"] = vm.AnspruchZusatz?.ToString();
        answers["AnspruchGesamt"] = vm.AnspruchGesamt?.ToString();
        answers["Tage1"] = vm.Tage1?.ToString();
        answers["Von1"] = vm.Von1?.ToString("yyyy-MM-dd");
        answers["Bis1"] = vm.Bis1?.ToString("yyyy-MM-dd");
        answers["Tage2"] = vm.Tage2?.ToString();
        answers["Von2"] = vm.Von2?.ToString("yyyy-MM-dd");
        answers["Bis2"] = vm.Bis2?.ToString("yyyy-MM-dd");
        answers["Tage3"] = vm.Tage3?.ToString();
        answers["Von3"] = vm.Von3?.ToString("yyyy-MM-dd");
        answers["Bis3"] = vm.Bis3?.ToString("yyyy-MM-dd");
        answers["TageGesamt"] = vm.TageGesamt?.ToString();
        answers["Restanspruch"] = vm.Restanspruch?.ToString();
        answers["Reason"] = vm.Reason;
        answers["FromDate"] = vm.Von1?.ToString("yyyy-MM-dd");
        answers["ToDate"] = vm.Bis1?.ToString("yyyy-MM-dd");

        var inst = new FormApproval.Domain.FormInstance
        {
            TemplateId = TemplateId,
            OwnerUserId = Me.UserId,
            OwnerName = Me.Name,
            OwnerEmail = Me.Email,
            Department = Me.Department,
            Answers = answers
        };
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Create" });
        return inst;
    }

    public class PtoVm
    {
        public string? Antragstyp { get; set; }
        public string? Name { get; set; }
        public string? Vorname { get; set; }
        public string? Abteilung { get; set; }
        public DateTime? Geburtsdatum { get; set; }
        public int? AnspruchAktuellesJahr { get; set; }
        public int? AnspruchZusatz { get; set; }
        public int? AnspruchGesamt { get; set; }
        public int? Tage1 { get; set; }
        public DateTime? Von1 { get; set; }
        public DateTime? Bis1 { get; set; }
        public int? Tage2 { get; set; }
        public DateTime? Von2 { get; set; }
        public DateTime? Bis2 { get; set; }
        public int? Tage3 { get; set; }
        public DateTime? Von3 { get; set; }
        public DateTime? Bis3 { get; set; }
        public int? TageGesamt { get; set; }
        public int? Restanspruch { get; set; }
        public string? Reason { get; set; }
    }
}