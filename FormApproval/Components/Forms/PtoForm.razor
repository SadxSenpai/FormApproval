@using Microsoft.AspNetCore.Components.Forms
@inject FormApproval.Services.IFormRepository Repo
@inject FormApproval.Services.ICurrentUser Me
@inject NavigationManager Nav
@inject ILogger<PtoForm> Logger
@inject FormApproval.Services.IPdfService Pdfs

<EditForm Model="@vm"
          OnValidSubmit="@HandleSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit"
          FormName="NewLeaveRequestForm-PTO">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <style>
        :root {
          --bg: #f7f7fb;
          --card: #ffffff;
          --text: #1f2937;
          --muted: #6b7280;
          --primary: #2563eb;
          --border: #e5e7eb;
          --radius: 12px;
        }
        .fa-container { max-width: 960px; margin: 20px 0; padding: 0 0; }
        .fa-card {
          background: var(--card); border: 1px solid var(--border);
          border-radius: var(--radius); padding: 24px 20px; box-shadow: 0 4px 16px rgb(0 0 0 / 5%);
        }
        .fa-title { margin: 0 0 4px; font-size: 1.3rem; }
        .fa-subtitle { color: var(--muted); margin-bottom: 14px; }
        fieldset {
          border: 1px solid var(--border); border-radius: 10px;
          padding: 16px; margin: 18px 0;
        }
        legend { padding: 0 8px; color: var(--muted); font-size: .95rem; }
        label { display: block; margin: 10px 0 6px; font-weight: 600; }
        .fa-input,
        .fa-textarea,
        .fa-select {
          width: 100%; padding: 10px 12px; border: 1px solid var(--border);
          border-radius: 10px; background: #fff; color: var(--text);
        }
        .fa-textarea { min-height: 110px; resize: vertical; }
        .fa-row { display: grid; grid-template-columns: 1fr; gap: 16px; }
        @@media (min-width: 720px) {
          .fa-row.cols-2 { grid-template-columns: repeat(2, 1fr); }
          .fa-row.cols-3 { grid-template-columns: repeat(3, 1fr); }
        }
        .inline { display: flex; gap: 18px; flex-wrap: wrap; align-items: center; }
        .inline .form-check { display: flex; align-items: center; gap: 8px; }
        .help { color: var(--muted); font-size: .9rem; margin-top: 6px; }
        .actions { display: flex; gap: 10px; margin-top: 14px; }
        .btn-reset {
          appearance: none; border: 1px solid var(--border);
          background: var(--card); color: var(--text); padding: 10px 14px;
          border-radius: 10px; cursor: pointer;
        }
        .btn-primary-like {
          background: var(--primary); color: #fff; border: 1px solid var(--primary);
          padding: 10px 14px; border-radius: 10px; cursor: pointer;
        }
    </style>

    <div class="fa-container">
        <div class="fa-card">
            <h1 class="fa-title">Antrag auf Urlaub / Arbeitsbefreiung</h1>
            <p class="fa-subtitle">Bitte ausfüllen. Felder mit * sind Pflichtfeldern.</p>

            @* Antragstyp *@
            <fieldset>
                <legend>Antragstyp *</legend>
                <div class="inline" role="radiogroup" aria-label="Antragstyp">
                    <label class="form-check">
                        <InputRadioGroup @bind-Value="vm.Antragstyp">
                            @* Render radios manually for layout consistency *@
                        </InputRadioGroup>
                        <input type="radio" name="antragstyp" value="urlaub" checked="@(vm.Antragstyp == "urlaub")" @onchange="@(() => vm.Antragstyp = "urlaub")" />
                        <span>Antrag auf Urlaub</span>
                    </label>
                    <label class="form-check">
                        <input type="radio" name="antragstyp" value="arbeitsbefreiung" checked="@(vm.Antragstyp == "arbeitsbefreiung")" @onchange="@(() => vm.Antragstyp = "arbeitsbefreiung")" />
                        <span>Antrag auf Arbeitsbefreiung / Freistellung</span>
                    </label>
                </div>
            </fieldset>

            @* Person *@
            <fieldset>
                <legend>Person</legend>
                <div class="fa-row cols-2">
                    <div>
                        <label for="name">Name *</label>
                        <InputText id="name" class="fa-input" @bind-Value="vm.Name" />
                    </div>
                    <div>
                        <label for="vorname">Vorname *</label>
                        <InputText id="vorname" class="fa-input" @bind-Value="vm.Vorname" />
                    </div>
                </div>

                <div class="fa-row cols-2">
                    <div>
                        <label for="abteilung">Abteilung *</label>
                        <InputText id="abteilung" class="fa-input" @bind-Value="vm.Abteilung" />
                    </div>
                    <div>
                        <label for="geburtsdatum">Geburtsdatum</label>
                        <InputDate id="geburtsdatum" class="fa-input" @bind-Value="vm.Geburtsdatum" />
                    </div>
                </div>
            </fieldset>

            @* Anspruch *@
            <fieldset>
                <legend>Anspruch</legend>
                <div class="fa-row cols-3">
                    <div>
                        <label for="anspruch-aktuelles-jahr">Urlaubsanspruch (verbleibender Anspruch lfd. Jahr) – Tage</label>
                        <InputNumber id="anspruch-aktuelles-jahr" class="fa-input" @bind-Value="vm.AnspruchAktuellesJahr" />
                    </div>
                    <div>
                        <label for="anspruch-zusatz">Zusätzlicher Urlaub (Azubi mit GdB ≥ 50) – Tage</label>
                        <InputNumber id="anspruch-zusatz" class="fa-input" @bind-Value="vm.AnspruchZusatz" />
                    </div>
                    <div>
                        <label for="anspruch-gesamt">Gesamtanspruch – Tage</label>
                        <InputNumber id="anspruch-gesamt" class="fa-input" @bind-Value="vm.AnspruchGesamt" />
                    </div>
                </div>
                <p class="help">Gesamtanspruch = verbleibender Anspruch lfd. Jahr + zusätzlicher Urlaub.</p>
            </fieldset>

            @* Urlaubszeiträume *@
            <fieldset>
                <legend>Urlaubszeiträume</legend>

                <div class="fa-row cols-3">
                    <div>
                        <label for="tage1">Tage Urlaub</label>
                        <InputNumber id="tage1" class="fa-input" @bind-Value="vm.Tage1" />
                    </div>
                    <div>
                        <label for="von1">vom</label>
                        <InputDate id="von1" class="fa-input" @bind-Value="vm.Von1" />
                    </div>
                    <div>
                        <label for="bis1">bis</label>
                        <InputDate id="bis1" class="fa-input" @bind-Value="vm.Bis1" />
                    </div>
                </div>
            </fieldset>

            @* Summen *@
            <fieldset>
                <legend>Summen</legend>
                <div class="fa-row cols-2">
                    <div>
                        <label for="tage-gesamt">Tage gesamt</label>
                        <InputNumber id="tage-gesamt" class="fa-input" @bind-Value="vm.TageGesamt" />
                    </div>
                    <div>
                        <label for="restanspruch">verbleibender Anspruch =</label>
                        <InputNumber id="restanspruch" class="fa-input" @bind-Value="vm.Restanspruch" />
                    </div>
                </div>
            </fieldset>

            @* Begründung (Reason) *@
            <fieldset>
                <legend>Begründung</legend>
                <InputTextArea class="fa-textarea" @bind-Value="vm.Reason" />
            </fieldset>

            @* Aktionen *@
            <div class="actions">
                <button type="button" class="btn-reset" @onclick="BackToSelection">Zurück zur Auswahl</button>
                <button type="submit" class="btn-primary-like">Antrag absenden</button>
                <button type="reset" class="btn-reset">Eingaben löschen</button>
            </div>

            @if (!string.IsNullOrEmpty(dateError))
            {
                <div class="validation-message mt-2">@dateError</div>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public Guid TemplateId { get; set; }

    private PtoVm vm = new();
    private string? dateError;

    protected override void OnParametersSet()
    {
        // Prefills
        vm.Abteilung ??= Me.Department;

        // Autofill PTO name fields if empty
        if (string.IsNullOrWhiteSpace(vm.Name) && string.IsNullOrWhiteSpace(vm.Vorname))
        {
            var full = Me.Name ?? string.Empty;
            var parts = full.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length >= 2)
            {
                vm.Vorname = parts[0];
                vm.Name = string.Join(' ', parts.Skip(1));
            }
            else
            {
                vm.Name = full;
            }
        }
    }

    private void HandleSubmit(EditContext context)
    {
        dateError = null;
        if (!ValidateInputs(out var err))
        {
            dateError = err;
            return;
        }

        var inst = ToInstance();
        inst.Status = FormApproval.Domain.FormStatus.Submitted;
        inst.SubmittedAt = DateTime.UtcNow;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Submit" });

        // Generate PTO PDF and attach URL for review window
        var pdfUrl = Pdfs.SavePtoPdf(inst);
        inst.Answers["PtoPdfUrl"] = pdfUrl;
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Attach", Comment = "PTO PDF attached" });

        Repo.CreateDraft(inst);
        Nav.NavigateTo("/submitted");
    }

    private static bool ValidateRange(DateTime? from, DateTime? to, out string error)
    {
        error = string.Empty;
        if (from.HasValue ^ to.HasValue)
        {
            error = "Bitte vollständigen Zeitraum (vom/bis) angeben.";
            return false;
        }
        if (from.HasValue && to.HasValue && to.Value.Date < from.Value.Date)
        {
            error = "Das 'bis'-Datum darf nicht vor dem 'vom'-Datum liegen.";
            return false;
        }
        return true;
    }

    private bool ValidateInputs(out string error)
    {
        error = string.Empty;

        // Required
        if (string.IsNullOrWhiteSpace(vm.Antragstyp)) { error = "Bitte Antragstyp auswählen."; return false; }
        if (string.IsNullOrWhiteSpace(vm.Name)) { error = "Name ist erforderlich."; return false; }
        if (string.IsNullOrWhiteSpace(vm.Vorname)) { error = "Vorname ist erforderlich."; return false; }
        if (string.IsNullOrWhiteSpace(vm.Abteilung)) { error = "Abteilung ist erforderlich."; return false; }

        // Validate entered date ranges if provided
        if (!ValidateRange(vm.Von1, vm.Bis1, out error)) return false;
        if (!ValidateRange(vm.Von2, vm.Bis2, out error)) return false;
        if (!ValidateRange(vm.Von3, vm.Bis3, out error)) return false;

        return true;
    }

    private void HandleInvalidSubmit(EditContext editContext)
    {
        var messages = string.Join(" | ", editContext.GetValidationMessages());
        Logger.LogWarning("PTO OnInvalidSubmit (Template={TemplateId}). Errors: {Errors}",
            TemplateId, string.IsNullOrWhiteSpace(messages) ? "(none)" : messages);
    }

    private void BackToSelection()
    {
        Nav.NavigateTo("/new");
    }

    private FormApproval.Domain.FormInstance ToInstance()
    {
        var answers = new Dictionary<string, string?>();

        // Map German PTO/Unpaid fields
        answers["Antragstyp"] = vm.Antragstyp;
        answers["Nachname"] = vm.Name;
        answers["Vorname"] = vm.Vorname;
        answers["Abteilung"] = vm.Abteilung;
        answers["Geburtsdatum"] = vm.Geburtsdatum?.ToString("yyyy-MM-dd");

        answers["AnspruchAktuellesJahr"] = vm.AnspruchAktuellesJahr?.ToString();
        answers["AnspruchZusatz"] = vm.AnspruchZusatz?.ToString();
        answers["AnspruchGesamt"] = vm.AnspruchGesamt?.ToString();

        answers["Tage1"] = vm.Tage1?.ToString();
        answers["Von1"] = vm.Von1?.ToString("yyyy-MM-dd");
        answers["Bis1"] = vm.Bis1?.ToString("yyyy-MM-dd");

        answers["Tage2"] = vm.Tage2?.ToString();
        answers["Von2"] = vm.Von2?.ToString("yyyy-MM-dd");
        answers["Bis2"] = vm.Bis2?.ToString("yyyy-MM-dd");

        answers["Tage3"] = vm.Tage3?.ToString();
        answers["Von3"] = vm.Von3?.ToString("yyyy-MM-dd");
        answers["Bis3"] = vm.Bis3?.ToString("yyyy-MM-dd");

        answers["TageGesamt"] = vm.TageGesamt?.ToString();
        answers["Restanspruch"] = vm.Restanspruch?.ToString();

        // PTO Reason
        answers["Reason"] = vm.Reason;

        // Compatibility with dashboard/detail (use first range)
        answers["FromDate"] = vm.Von1?.ToString("yyyy-MM-dd");
        answers["ToDate"] = vm.Bis1?.ToString("yyyy-MM-dd");

        var inst = new FormApproval.Domain.FormInstance
        {
            TemplateId = TemplateId,
            OwnerUserId = Me.UserId,
            OwnerName = Me.Name,
            OwnerEmail = Me.Email,
            Department = Me.Department,
            Answers = answers
        };
        inst.Audit.Add(new() { Actor = Me.Name, Action = "Create" });
        return inst;
    }

    public class PtoVm
    {
        // PTO/Unpaid (German form)
        public string? Antragstyp { get; set; } // "urlaub" | "arbeitsbefreiung"

        // Person
        public string? Name { get; set; }
        public string? Vorname { get; set; }
        public string? Abteilung { get; set; }
        public DateTime? Geburtsdatum { get; set; }

        // Anspruch
        public int? AnspruchAktuellesJahr { get; set; }
        public int? AnspruchZusatz { get; set; }
        public int? AnspruchGesamt { get; set; }

        // Urlaubszeiträume
        public int? Tage1 { get; set; }
        public DateTime? Von1 { get; set; }
        public DateTime? Bis1 { get; set; }

        public int? Tage2 { get; set; }
        public DateTime? Von2 { get; set; }
        public DateTime? Bis2 { get; set; }

        public int? Tage3 { get; set; }
        public DateTime? Von3 { get; set; }
        public DateTime? Bis3 { get; set; }

        // Summen
        public int? TageGesamt { get; set; }
        public int? Restanspruch { get; set; }

        // Reason
        public string? Reason { get; set; }
    }
}